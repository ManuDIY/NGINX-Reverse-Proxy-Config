################################
#########Event Handling#########
################################
events {
	worker_connections 1024;
}

################################
########Stream Proxying#########
################################
stream {

  # Defining upstream servers for proxied traffic
  upstream tcp_backend {
    server 24.17.195.62:8050;
  }
  upstream udp_backend {
    server 24.17.195.62:8051;
  }

  # Defining protocols and ports for data to be proxied.
  server {
    proxy_connect_timeout 300s; 
    proxy_timeout 300s; 
    listen 8050;
    proxy_pass tcp_backend; 
  }
  server {
    proxy_connect_timeout 300s; 
    proxy_timeout 300s; 
    listen 8051 udp;
    proxy_pass udp_backend; 
  }
}



################################
########Reverse Proxying########
################################
http {
	# Add an HSTS header. (Domain should only ever be browsed over HTTPS)
	add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

	# Define SSL options
	ssl_certificate /etc/letsencrypt/live/tjzimmerman.com/fullchain.pem;
	ssl_certificate_key /etc/letsencrypt/live/tjzimmerman.com/privkey.pem;
	ssl_session_cache shared:SSL:10m;
	ssl_session_timeout 10m;
	ssl_prefer_server_ciphers on;
	ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
	ssl_ciphers AES256+EECDH:AES256+EDH:!aNULL;
	

	# Redirect all incoming HTTP traffic to HTTPS.
	server {
	  listen 80 default_server;
	  listen [::]:80 default_server;
          server_name _;
	  return 301 https://$host$request_uri;
		
	}

	# RP @ WWW -> Website
	server  {
	  listen  443 ssl;
	  server_name www.tjzimmerman.com;
	  ssl  on;
	  location  / {
		proxy_pass http://24.17.195.62:2000/;
	  }
	}

	# RP @ . -> Website
	server  {
	  listen  443 ssl;
	  server_name tjzimmerman.com;
	  ssl  on;
	  location  / {
		proxy_pass http://24.17.195.62:2000/;
	  }
	}

	# RP @ Deluge -> Deluge WebUI
	server  {
	  listen  443 ssl;
	  server_name deluge.tjzimmerman.com;
	  ssl  on;
	  location  / {
		proxy_pass http://24.17.195.62:8112/;
	  }
	}

	# Define Plex Server IP:Port
	upstream plex_backend {
		server 24.17.195.62:32400;
		keepalive 32;
	}

	# RP @ Plex -> Plex Media Server
	server  {
		listen 443 ssl http2;
		server_name plex.tjzimmerman.com;

		# SSL Settings...
		ssl on;
		ssl_stapling on;
		ssl_stapling_verify on;
		ssl_session_tickets on;
		ssl_dhparam /etc/letsencrypt/live/tjzimmerman.com/dhparam.pem;
		ssl_ecdh_curve secp384r1;

		# Gzip stuff...
		gzip on;
		gzip_vary on;
		gzip_min_length 1000;
		gzip_proxied any;
		gzip_types text/plain text/css text/xml application/xml text/javascript application/x-javascript image/svg+xml;
		gzip_disable "MSIE [1-6]\.";	
		
		# DNS stuff...
		resolver 8.8.4.4 8.8.8.8 valid=300s;
		resolver_timeout 10s;

		# Setting headers...
		proxy_set_header Host $host;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header X-Forwarded-Proto $scheme;

		# Websockets`
		proxy_http_version 1.1;
		proxy_set_header Upgrade $http_upgrade;
		proxy_set_header Connection "upgrade";

		# Buffering off send to the client as soon as the data is received from Plex.
		proxy_redirect off;
		proxy_buffering off;

		# Actual proxying...
		location / {
			proxy_pass https://plex_backend;
		}

		location /web {
			proxy_pass https://plex_backend;
		}

		# Custom error page...
		error_page 401 /401.html;
		location = /401.html {
			root /usr/share/nginx/html/;
			internal;
		}

	}

	# RP @ VPN -> OpenVPN Web Interface
	server {
	  listen  443 ssl;
	  server_name vpn.tjzimmerman.com;
	  ssl  on;
	  location  / {
		proxy_pass https://24.17.195.62:943/;
	  }
	}

	# RP @ LibreNMS -> LibreNMS Web Interface
	server {
	  listen  443 ssl;
	  server_name librenms.tjzimmerman.com;
	  ssl  on;
	  location  / {
		proxy_pass http://24.17.195.62:8442;
	  }
	}

	# RP @ rp -> Netdata Web Interface
	server {
	  listen  443 ssl;
	  server_name rp.tjzimmerman.com;
	  ssl  on;

	  # Support basic password authentication
	  auth_basic "Are you sure you're supposed to be here?";
    	  auth_basic_user_file /etc/nginx/passwords;
	  location  / {
		# Set the headers...
		proxy_set_header X-Forwarded-Host $host;
		proxy_set_header X-Forwarded-Server $host;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		
		# Actual proxying...
		proxy_pass http://127.0.0.1:19999;
		proxy_http_version 1.1;
		proxy_pass_request_headers on;
		proxy_set_header Connection "keep-alive";
		proxy_store off;
	  }
	}
}
